name: Hprofile Actions
on: workflow_dispatch
env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: action_app
  ECR_SERVICE: vprofile-actions-svc
  ECR_CLUSTER: vprofile_actions
  ECR_TASK_DEFINATION: aws-files/taskdeffile.json
  CONTAINER_NAME: vprofile-app
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Maven Test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      # Setup the Java dependence
      - name: Set Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=targets/surefire-reports/
          -Dsonar.junit.reportsPath=targte/jacoco.exec
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

  BUILD_AND_PUBLISH:
    runs-on: ubuntu-latest
    needs: Testing
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: update application.properties
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASSWORD }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          auto_tag: false
          tags: latest, ${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  DEPLOY:
    runs-on: ubuntu-latest
    needs: BUILD_AND_PUBLISH
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION}}

      #   - name: Login to Amazon ECR
      #     id: login-ecr
      #     uses: aws-actions/amazon-ecr-login@v1

      #   - name: Build, tag, and push image to Amazon ECR
      #     id: build-image
      #     env:
      #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #       ECR_REPOSITORY: my-ecr-repo
      #       IMAGE_TAG: ${{ github.sha }}
      #     run: |
      #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #       echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECR_TASK_DEFINATION }}
          container-name: ${{ env.CONTAINER_NAME}}
          image: ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECR_SERVICE }}
          cluster: ${{ env.ECR_CLUSTER }}
          wait-for-service-stability: true
